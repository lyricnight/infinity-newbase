import java.text.SimpleDateFormat

plugins {
	id 'fabric-loom' version '1.8-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

loom {
	accessWidenerPath = file("src/main/resources/infinity.accesswidener")
}

repositories {
	maven {
		name = "jitpack.io"
		url = "https://jitpack.io"
	}
}

def currentDate = new SimpleDateFormat("dd/MM/yyyy").format(new Date())

compileJava {
	// unicode fixer
	options.encoding 'UTF-8'

	doLast {
		def versionFile = new File(project.projectDir, 'src/main/java/club/lyric/infinity/Version.java')
		versionFile.parentFile.mkdirs()
		versionFile.text = "package club.lyric.infinity;\n" +
				"\npublic class Version {\n" +
				"    public static final String VERSION = \"${project.mod_version}\";\n" +
				"    public static final String DATE = \"${currentDate}\";\n" +
				"    public static final boolean NIGHTLY = ${project.isNightly};\n" +
				"}\n"
	}
}

ext {
	currentDate = new SimpleDateFormat("dd/MM/yyyy").format(new Date())
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	include(implementation("io.github.spair:imgui-java-binding:$project.imgui_version"))
	include(implementation("io.github.spair:imgui-java-lwjgl3:$project.imgui_version"))
	include(implementation("io.github.spair:imgui-java-natives-windows:$project.imgui_version"))
	include(implementation("io.github.spair:imgui-java-natives-linux:$project.imgui_version"))
	include(implementation("io.github.spair:imgui-java-natives-macos:$project.imgui_version"))
	implementation(platform("org.lwjgl:lwjgl-bom:$project.lwjgl_version"))

	include implementation('org.reflections:reflections:0.10.2')

	compileOnly("org.projectlombok:lombok:$project.lombok_version")
	annotationProcessor("org.projectlombok:lombok:$project.lombok_version")
}


processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}